// Generated by CoffeeScript 1.10.0
var Blade, Coffee, Express, ModuleServer;

Express = require("express");

Blade = require("blade");

Coffee = require("coffee-middleware");


/*
Connect plugin to serve modules.
 */

ModuleServer = (function() {

  /*
  @property {Object} Stores modules that have been loaded as `{name, main, paths}`, where
  `name` is the client-side module name defined, `main` is a client-side path to the main script,
  and `paths` is an object of `{script: location}` of additional files to serve.
   */
  ModuleServer.prototype._loadedPackages = [];


  /*
  @param {Connect} router a [connect framework](https://github.com/senchalabs/connect) instance
  @param {String} modulePath a path to serve module files from.  Defaults to `/module/`
  @param {String} configPath a path to serve the module configuration from.
    Defaults to `/modules/ModuleConfig.coffee`
   */

  function ModuleServer(router, modulePath, configPath) {
    this.router = router;
    this.modulePath = modulePath != null ? modulePath : "/module/";
    this.configPath = configPath != null ? configPath : "/modules/ModuleConfig.js";
    this.list();
    this.moduleConfig();
    this.blade();
    this.requirejs();
    this.jquery();
  }


  /*
  Loads a client module, and serves it under the provided name.
  
  Valid paths:
  
  | Type                      | Example                                                           |
  | ------------------------- | ----------------------------------------------------------------- |
  | Absolute path:            | `load("ServerConnection", "/usr/local/serverconnection/client/")` |
  | NPM package:              | `load("URLParser", "@codelenny/url-parser")`                      |
  | Directory in NPM package: | `load("QueryParser", "@codelenny/url-parser/query")`              |
  | Relative path:            | `load("Logging", "../../advanced-logging/")`                      |
  
  @param {String} name module name to provide to the client
  @param {String} path location of module source files
   */

  ModuleServer.prototype.load = function(name, path) {
    var main, paths, pkg;
    path = this.findPath(path);
    pkg = require(path + "/package.json");
    main = pkg.main.replace(/^coffee\/(.*)\.coffee/, "$1.js").replace(/^public\/(.*)$/, "$1");
    this.middleware(name, path);
    paths = this.correctPaths(name, pkg["com.codelenny.paths"]);
    this._loadedPackages.push({
      name: name,
      main: main,
      paths: paths
    });
    return this.loadSubmodules(pkg, path);
  };


  /*
  Finds any submodules required by a given module.
  @param {Object} pkg the parsed contents of `package.json`
  @param {String} path location of module source files
   */

  ModuleServer.prototype.loadSubmodules = function(pkg, path) {
    var name, pkgs, ref, results, subpath;
    pkgs = (ref = pkg["com.codelenny.client_module"]) != null ? ref : pkg["com.codelenny.client_modules"];
    if (!pkgs) {
      return;
    }
    results = [];
    for (name in pkgs) {
      subpath = pkgs[name];
      results.push(this.load(name, require("path").resolve(path, subpath.replace("$PATH", path))));
    }
    return results;
  };


  /*
  Add middleware for a given module.
  @param {String} name module name to provide to the client
  @param {String} path location of module source files
   */

  ModuleServer.prototype.middleware = function(name, path) {
    this.router.use("" + this.modulePath + name, Express["static"](path + "/public"));
    this.router.use("" + this.modulePath + name + "/blade", Blade.middleware(path + "/blade"));
    return this.router.use("" + this.modulePath + name, Coffee({
      src: path + "/coffee",
      compress: true,
      encodeSrc: false
    }));
  };


  /*
  Modules can define paths to files under package.json that will be provided to RequireJS.
  Substitute locations to public files via `$PUBLIC`, and remove trailing `.js` extensions.
  
  For example, to provide a local copy of a library, `underscore.js` located in the public directory
  of a module loaded via `load("UserCounter", "@codelenny/user-counter")`:
  
  ```js
  // in package.json
  {
    ...,
    "com.codelenny.paths": {
      "_": "$PUBLIC/underscore",
      "jquery": "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/core.js"
    }
  }
  ```
  
  ```js
  define(["UserCounter/_", "UserCounter/jquery"], function(_, $) {
    // _ and $ can be used
  });
  ```
  
  @param {String} name module name to provide to the client
  @param {Object<String, String>} paths an object of url locations to serve, and locations of files
   */

  ModuleServer.prototype.correctPaths = function(name, paths) {
    var location, script;
    for (script in paths) {
      location = paths[script];
      paths[script] = location.replace("$PUBLIC", "" + this.modulePath + name).replace(/\.js$/, '');
    }
    return paths;
  };


  /*
  Locates a node module via `require.resolve`, then stripping the class.
  See {ModuleServer.load} for example paths.
  @param {String} path either an absolute file path, or a path to resolve.
  @return {String} a full path to the module required.
   */

  ModuleServer.prototype.findPath = function(path) {
    try {
      if (path[0] !== "/") {
        path = require.resolve(path).replace(new RegExp("^(.*\\/node_modules\\/" + path + ").*$"), '$1');
      }
    } catch (undefined) {}
    return path;
  };


  /*
  Lists all loaded modules with paths to locate files.
   */

  ModuleServer.prototype.list = function() {
    return this.router.get("/modules/", (function(_this) {
      return function(req, res) {
        var fullPaths;
        fullPaths = _this._loadedPackages.map(function(arg) {
          var main, name, paths;
          name = arg.name, main = arg.main, paths = arg.paths;
          return {
            name: name,
            main: "" + _this.modulePath + name + "/" + main,
            paths: paths
          };
        });
        return res.json(fullPaths);
      };
    })(this));
  };


  /*
  Provides a configuration package (setup for RequireJS) at /modules/ModuleConfig.js
  @see ModuleConfig
   */

  ModuleServer.prototype.moduleConfig = function() {
    return this.router.get(this.configPath, (function(_this) {
      return function(req, res) {
        return res.sendFile(require("path").resolve(__dirname + "/../lib/ModuleConfig.js"));
      };
    })(this));
  };


  /*
  Provides an empty Blade middleware to allow loading /blade/plugins/liveui.js
   */

  ModuleServer.prototype.blade = function() {
    return this.router.use(require("blade").middleware(__dirname + "/../blade"));
  };


  /*
  Provides RequireJS source as /requirejs/
   */

  ModuleServer.prototype.requirejs = function() {
    return this.router.get("/requirejs/", function(req, res) {
      return res.sendFile(require.resolve("requirejs/require.js"));
    });
  };


  /*
  Provides jQuery source as /jquery.js
   */

  ModuleServer.prototype.jquery = function() {
    return this.router.get("/jquery.js", function(req, res) {
      return res.sendFile(require.resolve("jquery/dist/jquery.min.js"));
    });
  };

  return ModuleServer;

})();

module.exports = ModuleServer;

//# sourceMappingURL=ModuleServer.js.map
