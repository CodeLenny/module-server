// Generated by CoffeeScript 1.11.1
var Bluebird, Deferred,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Bluebird = require("bluebird");


/*
Creates a deferred Promise, that can be resolved in a later scope.
 */

Deferred = (function(superClass) {
  extend(Deferred, superClass);

  function Deferred() {
    var executor;
    executor = (function(_this) {
      return function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
        return void 0;
      };
    })(this);
    this._bitField = 0;
    this._fulfillmentHandler0 = void 0;
    this._rejectionHandler0 = void 0;
    this._promise0 = void 0;
    this._receiver0 = void 0;
    this._resolveFromExecutor(executor);
    this._promiseCreated();
    this._fireEvent("promiseCreated", this);
  }

  return Deferred;

})(Bluebird);

module.exports = Deferred;

//# sourceMappingURL=Deferred.js.map
